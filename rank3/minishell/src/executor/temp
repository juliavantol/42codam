void	run_command(t_exe *executor, char **split_cmd)
{
	char	*path;

	path = get_cmd_path(executor->paths, split_cmd[0]);
	if (!path)
		error_exit("Command not found");
	if (execve(path, split_cmd, executor->minishell_envp) == -1)
	{
		ft_putstr_fd("Execve error", 2);
		error_exit("Execve error");
	}
}

void	execute(t_exe *executor, char **cmd)
{
	int		fds[2];
	int		status;
	pid_t	pid;

	if (pipe(fds) < 0)
		error_exit("Error with opening the pipe");
	pid = fork();
	if (pid < 0)
		error_exit("Error with fork");
	if (pid == 0)
	{
		run_command(executor, cmd);
		exit(EXIT_SUCCESS);
	}
	else
		waitpid(pid, &status, 0);
}

char	*init_prompt(const char *prompt)
{
	char	*input;

	input = readline(prompt);
	if (!input)
	{
		printf("\n");
		return (NULL);
	}
	while (!valid_input(input))
	{
		free (input);
		input = readline(prompt);
		if (!input)
		{
			printf("\n");
			return (NULL);
		}
	}
	add_history(input);
	return (input);
}

int	main(int argc, char **argv, char **envp)
{
	char	*input;
	t_exe	executor;

	if (!proper_start(argc, argv))
		return (EXIT_FAILURE);
	init_executor(&executor, envp);
	while (1)
	{
		input = init_prompt("minishell$ ");
		if (!input)
			return (EXIT_SUCCESS);
		check_command(&executor, input);
		free(input);
	}
}